
#ifndef XMPP_VALUES__H
#define XMPP_VALUES__H

namespace net {



typedef enum
{
	ERROR_NONE =0,
	ERROR_CONNECTION_TIMED_OUT,							// General timeout
	ERROR_TRANSPORT,									// Socket problem
	ERROR_SERVER_STREAM_FEATURE_INVALID,				// Either badly formed feature stanza or no SASL support etc
	ERROR_AUTHENTICATION_FAILED
}XmppClientError;



typedef enum
{
	PRESENCE_SHOW_AWAY =0,
	PRESENCE_SHOW_CHAT,
	PRESENCE_SHOW_DND,
	PRESENCE_SHOW_XA,
	PRESENCE_INVALID
}XmppPresenceShowStatus;



typedef enum
{
	CHATSTATE_ACTIVE =0,
	CHATSTATE_INACTIVE,
	CHATSTATE_GONE,
	CHATSTATE_COMPOSING,
	CHATSTATE_PAUSED
}XmppChatState;


typedef enum
{
	OFFLINE=0
}XmppOnlineStatus;




//////////////////////////////////////////////////////////////////////////
// Stanza / Xml strings


// namespace values
#define NS_XML									"xmlns"
#define NS_STREAM								"xmlns:stream"

#define NS_VAL_JABBER_CLIENT					"jabber:client"
#define NS_VAL_STREAM							"http://etherx.jabber.org/streams"
#define NS_VAL_TLS								"urn:ietf:params:xml:ns:xmpp-tls"
#define NS_VAL_SASL								"urn:ietf:params:xml:ns:xmpp-sasl"
#define NS_VAL_BIND								"urn:ietf:params:xml:ns:xmpp-bind"
#define NS_VAL_SESSION							"urn:ietf:params:xml:ns:xmpp-session"
#define NS_VAL_CHAT_STATES						"http://jabber.org/protocol/chatstates"



// query namespaces
#define NS_QUERY_ROSTER							"jabber:iq:roster"


// general attributes
#define ATTRIBUTE_TO							"to"
#define ATTRIBUTE_FROM							"from"
#define ATTRIBUTE_ID							"id"
#define ATTRIBUTE_TYPE							"type"
#define ATTRIBUTE_LANGUAGE						"xml:lang"

#define ATTRIBUTE_VERSION_KEY					"version"
#define ATTRIBUTE_VERSION_VAL					"1.0"

#define ATTRIBUTE_AUTH_MECHANISM				"mechanism"
#define ATTRIBUTE_SASL_PLAIN					"PLAIN"
#define ATTRIBUTE_SASL_MD5						"DIGEST-MD5"



// miscellaneous node names
#define NODE_STREAM								"stream:stream"
#define NODE_STREAM_FEATURES					"stream:features"
#define NODE_START_TLS							"starttls"
#define NODE_REQUIRED							"required"
#define NODE_MECHANISMS							"mechanisms"
#define NODE_MECHANISM							"mechanism"
#define NODE_AUTH								"auth"
#define NODE_BIND								"bind"
#define NODE_SESSION							"session"
#define NODE_SUCCESS							"success"
#define NODE_FAILURE							"failure"


// languages
#define LANGUAGE_ENGLISH						"en"



// stanzas
#define STANZA_MESSAGE							"message"
#define STANZA_PRESENCE							"presence"
#define STANZA_IQ								"iq"



// message stanza types
#define MESSAGE_STANZA_TYPE_CHAT				"chat"							// * chat -- The message is sent in the context of a one-to-one chat conversation. A compliant client SHOULD present the message in an interface enabling one-to-one chat between the two parties, including an appropriate conversation history.
#define MESSAGE_STANZA_TYPE_ERROR				"error"							// * error -- An error has occurred related to a previous message sent by the sender (for details regarding stanza error syntax, refer to [XMPP‑CORE] (Saint-Andre, P., “Extensible Messaging and Presence Protocol (XMPP): Core,” October 2004.)). A compliant client SHOULD present an appropriate interface informing the sender of the nature of the error.
#define MESSAGE_STANZA_TYPE_GROUPCHAT			"groupchat"						// * groupchat -- The message is sent in the context of a multi-user chat environment (similar to that of [IRC] (Oikarinen, J. and D. Reed, “Internet Relay Chat Protocol,” May 1993.)). A compliant client SHOULD present the message in an interface enabling many-to-many chat between the parties, including a roster of parties in the chatroom and an appropriate conversation history. Full definition of XMPP-based groupchat protocols is out of scope for this memo (for details see [JEP‑0045] (Saint-Andre, P., “Multi-User Chat,” June 2004.)).
#define MESSAGE_STANZA_TYPE_HEADLINE			"headline"						// * headline -- The message is probably generated by an automated service that delivers or broadcasts content (news, sports, market information, RSS feeds, etc.). No reply to the message is expected, and a compliant client SHOULD present the message in an interface that appropriately differentiates the message from standalone messages, chat sessions, or groupchat sessions (e.g., by not providing the recipient with the ability to reply).
#define MESSAGE_STANZA_TYPE_NORMAL				"normal"						// * normal -- The message is a single message that is sent outside the context of a one-to-one conversation or groupchat, and to which it is expected that the recipient will reply. A compliant client SHOULD present the message in an interface enabling the recipient to reply, but without a conversation history.

// message stanza child nodes
#define MESSAGE_STANZA_SUBJECT					"subject"
#define MESSAGE_STANZA_BODY						"body"
#define MESSAGE_STANZA_THREAD					"thread"

// message stanza chat states (xep-0085)
#define MESSAGE_STANZA_CHATSTATE_ACTIVE			"active"						// <active/>  	User is actively participating in the chat session.  	User accepts an initial content message, sends a content message, gives focus to the chat session interface (perhaps after being inactive), or is otherwise paying attention to the conversation.
#define MESSAGE_STANZA_CHATSTATE_INACTIVE		"inactive"						// <inactive/> 	User has not been actively participating in the chat session. 	User has not interacted with the chat session interface for an intermediate period of time (e.g., 2 minutes).
#define MESSAGE_STANZA_CHATSTATE_GONE			"gone"							// <gone/> 	User has effectively ended their participation in the chat session. 	User has not interacted with the chat session interface, system, or device for a relatively long period of time (e.g., 10 minutes).
#define MESSAGE_STANZA_CHATSTATE_COMPOSING		"composing"						// <composing/> 	User is composing a message. 	User is actively interacting with a message input interface specific to this chat session (e.g., by typing in the input area of a chat window).
#define MESSAGE_STANZA_CHATSTATE_PAUSED			"paused"						// <paused/> 	User had been composing but now has stopped. 	User was composing but has not interacted with the message input interface for a short period of time (e.g., 30 seconds).





// presence stanza types
#define PRESENCE_STANZA_TYPE_UNAVAILABLE		"unavailable"					// * unavailable -- Signals that the entity is no longer available for communication.
#define PRESENCE_STANZA_TYPE_SUBSCRIBE			"subscribe"						// * subscribe -- The sender wishes to subscribe to the recipient's presence.
#define PRESENCE_STANZA_TYPE_SUBSCRIBED			"subscribed"					// * subscribed -- The sender has allowed the recipient to receive their presence.
#define PRESENCE_STANZA_TYPE_UNSUBSCRIBE		"unsubscribe"					// * unsubscribe -- The sender is unsubscribing from another entity's presence.
#define PRESENCE_STANZA_TYPE_UNSUBSCRIBED		"unsubscribed"					// * unsubscribed -- The subscription request has been denied or a previously-granted subscription has been cancelled.
#define PRESENCE_STANZA_TYPE_PROBE				"probe"							// * probe -- A request for an entity's current presence; SHOULD be generated only by a server on behalf of a user.
#define PRESENCE_STANZA_TYPE_ERROR				"error"							// * error -- An error has occurred regarding processing or delivery of a previously-sent presence stanza.

// presence child nodes
#define PRESENCE_STANZA_SHOW					"show"
#define PRESENCE_STANZA_STATUS					"status"
#define PRESENCE_STANZA_PRIORITY				"priority"


// presence show sub nodes
#define PRESENCE_STANZA_SHOW_AWAY				"away"							// * away -- The entity or resource is temporarily away.
#define PRESENCE_STANZA_SHOW_CHAT				"chat"							// * chat -- The entity or resource is actively interested in chatting.
#define PRESENCE_STANZA_SHOW_DND				"dnd"							// * dnd -- The entity or resource is busy (dnd = "Do Not Disturb").
#define PRESENCE_STANZA_SHOW_XA					"xa"							// * xa -- The entity or resource is away for an extended period (xa = "eXtended Away").





// iq stanza types
#define IQ_STANZA_TYPE_SET						"set"
#define IQ_STANZA_TYPE_GET						"get"
#define IQ_STANZA_TYPE_RESULT					"result"


// iq stanza child nodes
#define IQ_STANZA_BIND							"bind"
#define IQ_STANZA_RESOURCE						"resource"
#define IQ_STANZA_SESSION						"session"
#define IQ_STANZA_QUERY							"query"
#define IQ_STANZA_JID							"jid"
#define IQ_STANZA_NAME							"name"
#define IQ_STANZA_SUBSCRIPTION					"subscription"
#define IQ_STANZA_ITEM							"item"
#define IQ_STANZA_GROUP							"group"
//////////////////////////////////////////////////////////////////////////


} // namespace net


#endif // XMPP_VALUES__H